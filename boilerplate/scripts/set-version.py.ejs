#!/usr/bin/env python3
import os, sys, json, subprocess, re
from collections import OrderedDict

# Get the version number from the arguments
assert len(sys.argv) is 4
version = list(map(int, sys.argv[1:]))

# Get the current package file
root = os.path.join(os.path.dirname(__file__), "..")
os.chdir(root)
package_file = os.path.join(root, "package.json")
package = json.load(open(package_file, "r", encoding="utf8"), object_pairs_hook=OrderedDict)

# Update the package.json version
package["version"] = ".".join(map(str, version))
open(package_file, "w", encoding="utf8").write(json.dumps(package, indent=2))

# Calculate the iOS an Android version numbers
build = version[-1]
ios_version = ".".join(map(str, version[:-1]))
android_version_name = ".".join(map(str, version))
android_version_code = str(version[0] * 1000000 + version[1] * 1000 + version[2])

# Update iOS
subprocess.check_call("""cd ios && agvtool new-marketing-version %s""" % (ios_version,), shell=True)
subprocess.check_call("""cd ios && agvtool new-version %s""" % (build,), shell=True)
subprocess.check_call("""/usr/libexec/PlistBuddy -c "Set :CFBundleVersion %s" ios/<%= props.name %>/Info.plist""" % (build,), shell=True)
subprocess.check_call("""/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString %s" ios/<%= props.name %>/Info.plist""" % (ios_version,), shell=True)

# Update Android
gradle_build = open("android/app/build.gradle", "r", encoding="utf8").read()
gradle_build = re.sub(r"\bversionCode\s+\d+\b", "versionCode %s" % (android_version_code,), gradle_build)
gradle_build = re.sub(r'\bversionName\s\"[0-9.]+\"', 'versionName "%s"' % (android_version_name,), gradle_build)
open("android/app/build.gradle", "w", encoding="utf8").write(gradle_build)
